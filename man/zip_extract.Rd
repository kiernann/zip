% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract.R
\name{zip_extract}
\alias{zip_extract}
\title{Uncompress 'zip' Archives}
\usage{
zip_extract(
  zipfile,
  files = NULL,
  overwrite = TRUE,
  junkpaths = FALSE,
  exdir = "."
)
}
\arguments{
\item{zipfile}{Path to the zip file to uncompress.}

\item{files}{Character vector of files to extract from the archive.
Files within directories can be specified, but they must use a forward
slash as path separator, as this is what zip files use internally.
If \code{NULL} (default), all files will be extracted.}

\item{overwrite}{Whether to overwrite existing files. If \code{FALSE} and
a file already exists, then an error is thrown.}

\item{junkpaths}{Whether to ignore all directory paths when creating
files. If \code{TRUE}, all files will be extracted to the top level of \code{exdir}.}

\item{exdir}{Directory to uncompress the archive to. If it does not
exist, it will be created.}
}
\value{
An \code{\link[fs:fs_path]{fs::fs_path()}} character vecttor of extracted files, invisibly.

This is like the "internal" method of \code{\link[utils:unzip]{utils::unzip()}} and unlike
\code{\link[zip:unzip]{zip::unzip()}} (See r-lib/zip#35). The \code{\link[=zip_info]{zip_info()}} C internal is called
separately to get file names, which are not yet returned from the C internal
used for extraction.
}
\description{
\code{zip_extract()} always restores modification times of the extracted files and
directories.
}
\section{Permissions}{


If the zip archive stores permissions and was created on Unix, the
permissions will be restored.
}

\examples{
\dontshow{.old_wd <- setwd(tempdir())}
library(fs)
dir_create("mydir")
cat("first file",  file = path("mydir", "file1"))
cat("second file", file = path("mydir", "file2"))

z <- file_temp(ext = "zip")
zip_create(z, files = "mydir")

## List contents
zip_info(z)

## Extract
tmp <- path_temp()
out <- zip_extract(z, exdir = tmp)
length(out)
\dontshow{setwd(.old_wd)}

}
